create your colors in style.css
:root {
  --yellow: #0f3565;
}

then use them with var(--yellow)

---------------------------------

# Shortcut Emmet

.item{$}*10

  equivalent to :

  <div class="item">1</div>
  <div class="item">2</div>
  <div class="item">3</div>
  <div class="item">4</div>
  <div class="item">5</div>
  <div class="item">6</div>
  <div class="item">7</div>
  <div class="item">8</div>
  <div class="item">9</div>
  <div class="item">10</div>

.item.item${$}*5

  equivalent to :

  <div class="item item1">1</div>
  <div class="item item2">2</div>
  <div class="item item3">3</div>
  <div class="item item4">4</div>
  <div class="item item5">5</div>

---------------------------------

# How to start css grid ?

.parent {
  display: grid;
  grid-template-columns: 100px 100px 100px => 3 columns of 100 px wide (%, rem, px, auto);
  grid-template-rows: ...;
  grid-gap: margin between our tracks;
}

---------------------------------

# Dev tools

Inspect > select element > layout

dashed lines (=explicit creation like gap)
dotted lines (=implicit)
solid lines (=explicit grid edge)

---------------------------------

# How to resize the implicit columns/rows ?

grid-auto-rows
or
grid-auto-columns

---------------------------------

# How to create implicit columns ?

If we add an element, it creates an implicit row, not a column

grid-auto-flow: column;

---------------------------------

# How to resize in css grid ?

AVOID % when resizing.
If you have grid-gap, it will not fit well

use fr instead
fr is equivalent to Free Space !
it is the default height (row) of an element.

---------------------------------

# auto vs fr

auto will resize based on the content.
ex: if content = '1' with auto it will be small
if content = 'flo is cool', auto  will adjust the width to it.

fr will adjust in terms of free space

---------------------------------

# repeat()

grid-template-columns: 1fr 1fr 1fr 1fr;
is equivalent to :
grid-template-columns: repeat(4, 1fr);

# How to alternate columns ?

grid-template-columns(4, 1fr 2fr) => will create '1fr 2fr 1fr 2fr 1fr 2fr 1fr 2fr'

---------------------------------

# How to resize grid with media queries ?

**Original css :

> variable declarations:

  .grid {
    --columns: 200px 200px;
  }

> styles :

  .grid {
    display: grid;
    grid-template-columns: var(--columns);
    grid-auto-rows: 140px;
    grid-gap: 20px;
    justify-content: center;
  }


**Now if you want one column instead of 2 once you go on mobile (< 450px) :

  @media all and (max-width: 450px) {
    .grid {
      --columns: 200px;
    }
  }

---------------------------------

# Inheritance problems to be aware of : value vs variable

If you declare initially :

:root {
  --red: #ff6f69;
  --main-color: var(--red);
}

and then set :

#navbar {
    --red: orange;
}

#navbar a {
    color: var(--main-color);
}

=> it won't change anything ! orange will not overwrite #ff6f69 nor main-color value.

main-color does NOT have a reference to the variable, only to the value

You can instead write :

#navbar {
    --main-color: orange;
}

#navbar a {
    color: var(--main-color);
}

---------------------------------
(video 9)

# Resizing grid items

if you have 30 elements 5 columns * 6 rows
you want to resize item 9 :

.item9 {
  width: 500px;
}

It will resize the entire columns containing items 4, 9, 14, 19, 24, 29 !
NOT what we want.
The same thing happens if instead of fixing the width, we add a long content to the item.

Use span instead :

.item9 {
  grid-column: span 2;
  grid-row: span 2;
}

Be careful, it will shift the next items.

---------------------------------
(video 10)

# Placing grid items

.move-me {
  grid-column: 1 / -1 //=> it will grid-column-start from 1 and grid-column finish at -1
}

grid-column: 1 / -1; is equivalent to width: 100%

faster than writing :
grid-column-start: 1;
grid-column-end: -1;


you can also use span like :
grid-column: 1 / span 3;

or rows :

grid-row: span 2 / 3;

---------------------------------
(video 11)

# Spanning and placing

grid-template-columns: repeat(5, 1fr 2fr) => 10 columns with 1fr / 2fr 5 times !

---------------------------------
(video 12)

# auto-fit and auto-fill

auto-fill : figure it out by itself how many you can fit !
ex:
repeat(auto-fill, 150px)

auto-fit: if you only have few items inside big container, no other tracks will pop out.

---------------------------------
(video 13)

# minmax() combined with auto-fit or auto-fill = EASYLIFE !

=> minmax(minvalue, maxvalue)

grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
RESPONSIVE !!

# fit-content

fit-content(maxvalue)

---------------------------------
(video 14)

# Placing items using grid template areas

> make some areas in grid (3 x 3)
grid-template-columns: 1fr 500px 1fr;
grid-template-areas: 150px 150px 100px;

> name your areas (inside 3 x 3 grid)
grid-template-areas:
  'sidebar-1  content  sidebar-2'
  'sidebar-1  content  sidebar-2'
  'footer     footer   .'

the dot '.' makes an empty space

> set the items in named areas
.footer {
  grid-aread: footer;
}

.item1 {
  grid-area: sidebar-1
}

.item2 {
  grid-area: content;
}
...
...

> you can make it responsive too :

@media (max-width: 700px) {
  .container {
    grid-template-areas:
    "content    content     content"
    "sidebar-1  sidebar-1   sidebar-2"
    "footer     footer      footer"
  }
}

> you can also use the named lines since we defined areas

.item5 {
  grid-column: sidebar-1-start / content-end;
}

---------------------------------
(video 15)

# Naming lines in CSS grid

At the grid creation, you can name your lines using brackets [].
Ex:

grid-template-columns: [site-left] 100px [sidebar-end content-start] 5fr [content-end] 1fr [site-right]

---------------------------------
(video 16)

# How to fit all blocks ? => grid-auto-flow: dense

> 70 items
> Make some irregular :
  .item:nth-child(6n)  {
    background: red;
    grid-column: span 6;
  }

now you have plenty of holes !
> Fix it with grid-auto-flow :

.container {
  ....
  ....
  grid-auto-flow: dense;
}

Then to move a specific item, you can force it (since nth-child is priority for css) with !important :

.item18 {
  background: blue;
  grid-column-end: -1 1important;
}

---------------------------------
(video 17)

# CSS grid alignment and centering

  -----
  justify-items:  stretch | start | end | center
  align-items:    stretch | start | end | center
  -----

  place-items: center center;
    => equivalent to :
    justify-items: center;
    +
    align-items: center;

  -----
  justify-content: stretch | start | end | center | space-around | space-between | space-evenly
  align-content: same !
  -----

  -----
  align-self:   stretch | start | end | center
  justify-self: not possible with flexbox !
  -----

  justify-* is row axis | width
  align-* is column axis | height


## A good way to start styling :

.item {
  /* We center the contents of these items. */
  display: grid;
  justify-content: center;
  align-items: center;

  background-color: var(--yellow); /* best colour */
}

---------------------------------
(video 18)

# Reorder grid using order

the property 'order' can order the browser to do something in a specific order.

Useful for example to change the order with media queries.
<style>
    .container {
      display: grid;
      grid-gap: 20px;
      grid-template-columns: repeat(10, 1fr);
    }

    .logo {
      grid-column: span 2;
      order: 3;
    }

    .nav {
      grid-column: span 8;
      order: 2;
    }

    .content {
      grid-column: 1 / -1;
      order: 4;
    }

    @media (max-width: 700px) {
      .logo {
        order: 1;
      }
    }

  </style>

---------------------------------
(video 19)

# Creating responsive cards

.albums {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    grid-gap: 20px;
  }

# You can nest a grid into a grid

.albums {
  display: grid;
  ...
  ...
}

.album {
  display: grid
  ...
  ...
}
