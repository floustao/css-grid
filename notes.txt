create your colors in style.css
:root {
  --yellow: #0f3565;
}

then use them with var(--yellow)

---------------------------------

# Shortcut Emmet

.item{$}*10

  equivalent to :

  <div class="item">1</div>
  <div class="item">2</div>
  <div class="item">3</div>
  <div class="item">4</div>
  <div class="item">5</div>
  <div class="item">6</div>
  <div class="item">7</div>
  <div class="item">8</div>
  <div class="item">9</div>
  <div class="item">10</div>

.item.item${$}*5

  equivalent to :

  <div class="item item1">1</div>
  <div class="item item2">2</div>
  <div class="item item3">3</div>
  <div class="item item4">4</div>
  <div class="item item5">5</div>

---------------------------------

# How to start css grid ?

.parent {
  display: grid;
  grid-template-columns: 100px 100px 100px => 3 columns of 100 px wide (%, rem, px, auto);
  grid-template-rows: ...;
  grid-gap: margin between our tracks;
}

---------------------------------

# Dev tools

Inspect > select element > layout

dashed lines (=explicit creation like gap)
dotted lines (=implicit)
solid lines (=explicit grid edge)

---------------------------------

# How to resize the implicit columns/rows ?

grid-auto-rows
or
grid-auto-columns

---------------------------------

# How to create implicit columns ?

If we add an element, it creates an implicit row, not a column

grid-auto-flow: column;

---------------------------------

# How to resize in css grid ?

avoid % when resizing.
If you have grid-gap, it will not fit well

use fr instead
fr is equivalent to Free Space !
it is the default height (row) of an element.

---------------------------------

# auto vs fr

auto will resize based on the content.
ex: if content = '1' it will be small
if content = 'flo is cool', it will adjust the width to it.

fr will adjust in terms of free space

---------------------------------

# repeat()

grid-template-columns: 1fr 1fr 1fr 1fr;
==
grid-template-columns: repeat(4, 1fr);

# How to alternate columns ?

grid-template-columns(4, 1fr 2fr) => will create '1fr 2fr 1fr 2fr 1fr 2fr 1fr 2fr'

---------------------------------

# How to resize grid with media queries ?

**Original css :

variable declarations:

  .grid {
    --columns: 200px 200px;
  }

styles :

  .grid {
    display: grid;
    grid-template-columns: var(--columns);
    grid-auto-rows: 140px;
    grid-gap: 20px;
    justify-content: center;
  }


**Now if you want one column instead of 2 once you go on mobile (< 450px) :

  @media all and (max-width: 450px) {
    .grid {
      --columns: 200px;
    }
  }

---------------------------------

# Inheritance problems to be aware of : value vs variable

If you declare initially :

:root {
  --red: #ff6f69;
  --main-color: var(--red);
}

and then set :

#navbar {
    --red: orange;
}

#navbar a {
    color: var(--main-color);
}

=> it won't change anything ! orange will not overwrite #ff6f69 nor main-color value.

main-color does NOT have a reference to the variable, only to the value

You can instead write :

#navbar {
    --main-color: orange;
}

#navbar a {
    color: var(--main-color);
}

---------------------------------

# Resizing grid items

if you have 30 elements 5 columns * 6 rows
you want to resize item 9 :

.item9 {
  width: 500px;
}

It will resize the entire columns containing items 4, 9, 14, 19, 24, 29 !
NOT what we want.
The same thing happens if instead of fixing the width, we add a long content to the item.

Use span instead :

.item9 {
  grid-column: span 2;
  grid-row: span 2;
}

Be careful, it will shift the next items.
